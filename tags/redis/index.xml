<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on agchen</title>
    <link>https://agchen28.github.io/tags/redis/</link>
    <description>Recent content in Redis on agchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 09 Sep 2016 23:28:44 +0800</lastBuildDate>
    
	<atom:link href="https://agchen28.github.io/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis的Script</title>
      <link>https://agchen28.github.io/blog/redis%E7%9A%84script/</link>
      <pubDate>Fri, 09 Sep 2016 23:28:44 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/redis%E7%9A%84script/</guid>
      <description>EVAL Redis 2.6.0开始，通过内置的Lua解释器，可以使用EVAL命令对Lua脚本进行求值。
EVAL script numkeys key [key ...] arg [arg ...]   script 参数是一段 Lua 5.1 脚本程序，它会被运行在 Redis 服务器上下文中。
 numkeys 参数用于指定键名参数的个数。
 key [key &amp;hellip;] 表示键名参数，从 EVAL 的第三个参数开始算起，表示在脚本中所用到的那些 Redis 键，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问(如： KEYS[1] ， KEYS[2] )。
 arg [arg &amp;hellip;] 是附加参数，可以在 Lua 中通过全局变量 ARGV 数组访问。
  &amp;gt; eval &amp;quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&amp;quot; 2 key1 key2 first second 1) &amp;quot;key1&amp;quot; 2) &amp;quot;key2&amp;quot; 3) &amp;quot;first&amp;quot; 4) &amp;quot;second&amp;quot;  在 Lua 脚本中，可以使用两个不同函数来执行 Redis 命令：</description>
    </item>
    
    <item>
      <title>Redis的持久化</title>
      <link>https://agchen28.github.io/blog/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Fri, 05 Aug 2016 12:58:40 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>redis提供两种持久化方式。
RDB RDB 保存的是数据集。
优点  RDB 是一个非常紧凑的文件，它保存了 Redis 在某个时间点上的数据集。
 RDB 非常适用于灾难恢复：可以（在加密后）将它传送到别的数据中心。
 RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。
 RDB 在恢复大数据集时的速度比 AOF 要快。
  缺点  服务器故障时可能会丢失几分钟的数据
 当数据集非常庞大时，fork()子进程会非常耗时，造成服务器在几毫秒内停止处理客户端，如果这时候CPU非常紧张的话，停止时间可能会长达一秒
  AOF(AppendOnly File) AOF 记录的是所有写操作命令，可以在后台对AOF 文件进行重写来减小文件的大小。
优点  使用 AOF 持久化会让 Redis 变得非常耐久：可以设置不同的 fsync 策略。默认策略为每秒钟 fsync 一次，也就是每秒钟将缓存中的AOF写到磁盘上。
 AOF文件过大时，会自动在后台进行重写，重写过程原有的AOF文件不会丢失。
 AOF文件容易被读懂分析。
  缺点  对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。
 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。</description>
    </item>
    
    <item>
      <title>Redis的Replication</title>
      <link>https://agchen28.github.io/blog/redis%E7%9A%84replication/</link>
      <pubDate>Mon, 01 Aug 2016 12:57:29 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/redis%E7%9A%84replication/</guid>
      <description>主从复制功能 主从复制（master-slave replication）功能可以让从服务器成为主服务器的精确复制品。
Redis 复制功能的几个特点：
 Redis 使用异步复制。
 一个主服务器可以有多个从服务器。
 复制功能不会阻塞主服务器
 复制功能也不会阻塞从服务器
 复制功能可以单纯地用于数据冗余
  配置 从服务器的配置文件添加下面配置：
slaveof 192.168.1.1 6379 masterauth &amp;lt;password&amp;gt;  也可以动态设置从服务器的主服务器：
SLAVEOF 192.168.1.1 10086 config set masterauth &amp;lt;password&amp;gt;  运作原理 当建立一个从服务器时，从服务器向主服务器发送一个 SYNC 命令。接到 SYNC 命令的主服务器将开始执行 BGSAVE ，并在保存操作执行期间，将所有新执行的写入命令都保存到一个缓冲区里面。
当 BGSAVE 执行完毕后，主服务器将执行保存操作所得的 .rdb 文件发送给从服务器，从服务器接收这个 .rdb 文件， 并将文件中的数据载入到内存中。
之后主服务器会以 Redis 命令协议的格式，将写命令缓冲区中积累的所有内容都发送给从服务器。
应用 读写分离 redis的主从同步功能常见的应用就是读写分离：将读的压力分担到从服务器身上，主服务器只负责写的操作，从而缓解主服务器的压力。
主从切换 假设主服务器挂掉，使用 SLAVEOF NO ONE 命令将一个从服务器变成主服务器，其他从服务器设置为与该服务器同步，从而实现主从切换。</description>
    </item>
    
    <item>
      <title>Redis中的数据类型</title>
      <link>https://agchen28.github.io/blog/redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 09 Jul 2016 12:55:43 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Redis中的数据类型包括：String、Hash、List、Set、SortedSet。
String 可以用来存放字符串或者数值类型，对于数值类型可以进行增加或减少操作。
实现一个简单的分布式锁 客户端执行命令：
SET resource-name anystring NX EX max-lock-time  如果服务端返回OK，那么获得锁。如果返回nil，请稍后再试。
计数器和限速器 使用 INCR 命令来统计用户一个时间段的操作次数，限速器可以用来限制一个公开API在一个时间段内的请求次数。
Bitmap Bitmap 对于一些特定类型的计算非常有效。
比如需要记录用户每天是否上线，计算总共上线天数，就可以使用 SETBIT 和 BITCOUNT 来实现。
假设我们需要为每个用户记录一个特殊属性，例如是否活跃用户，是否黑名单用户。我们可以将属性值作为key，用户id作为偏移量，通过 SETBIT 和 GETBIT 命令来实现。
Hash 也可以用来存储字符串和数值类型，数值类型可以增减操作。
适合用来存储对象，每个key下面的field对应该对象的一个属性，对该对象任一个属性读写操作的时间复杂度都是O(1)。
使用 HMGET 和 HMSET 命令可以读写多个field，时间复杂度为O(N)，N是给定的field数量。
使用 HGETALL 命令会返回该hash的所有field和value，时间复杂度是O(N)，N为该hash的大小。
List List是有序的列表，支持双端操作，还有阻塞的操作，可以用来实现阻塞队列。
事件提醒 我们经常会使用轮询的方式来查询List中是否有新元素达到。 另一种更好的方式是，使用 BLPOP 或者 BRPOP ，在新元素到达时立即进行处理，而新元素还没到达时，就一直阻塞住，避免轮询占用资源。
安全队列 使用 RPOPLPUSH 命令(或者它的阻塞版本 BRPOPLPUSH )实现安全队列。该命令返回一个消息，并把该消息塞入一个备份列表中，当消息处理成功后再用 LREM 命令将这个消息从备份表删除。
循环列表 给 RPOPLPUSH 命令的两个参数传入相同的key，可以不停地循环取出该列表中的元素。
循环列表可以应用在服务器的监控程序，不停地监控一组服务是否正常工作。
Set set为无序，且不重复的集合，且提供O(1)复杂度度的快速查找。set集合支持集合的并，交，差操作。
SortedSet 可排序的集合，根据score进行排序，如果两个score相同，则按照value的字典序排序。</description>
    </item>
    
    <item>
      <title>Redis安装记录</title>
      <link>https://agchen28.github.io/blog/redis%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 08 Jun 2016 11:04:56 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/redis%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</guid>
      <description> Redis简介 Redis是一个开源的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。
Redis优点  速度快
 支持丰富的数据类型: Redis支持最大多数开发人员已经知道如列表、集合、可排序集合、哈希等数据类型。
 操作都是原子的：所有 Redis的操作都是原子，从而确保当两个客户同时访问Redis服务器得到的是更新后的值。
  下载安装 wget http://download.redis.io/releases/redis-3.2.8.tar.gz tar xzf redis-3.2.8.tar.gz cd redis-3.2.8 make #可使用root用户执行`make install`，将可执行文件拷贝到/usr/local/bin目录下。这样就可以直接敲名字运行程序了。 make install  设置开机启动 启动脚本 redis_init_script 位于Redis的 /utils/ 目录下。 - 根据启动脚本要求，将修改好的配置文件以端口为名复制一份到指定目录。需使用root用户。
mkdir /etc/redis cp redis.conf /etc/redis/6379.conf   修改配置文件  bind:ip地址 port：端口号。默认6379 requirepass:设置密码 slaveof：从服务器需要配置 masterauth：主服务器的密码   将启动脚本复制到/etc/init.d目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。  cp redis_init_script /etc/init.d/redisd   设置为开机自启动
在启动脚本开头添加如下两行注释以修改其运行级别
#!/bin/sh # chkconfig: 2345 90 10 # description: Redis is a persistent key-value database#  #设置为开机自启动服务 chkconfig redisd on #打开服务 service redisd start #关闭服务 service redisd stop   检测 ps -ef |grep redis #检测后台进程是否存在 netstat -lntp | grep 6379 #检测6379端口是否在监听 redis_cli -a 123456 #使用`redis-cli`客户端检测连接是否正常  </description>
    </item>
    
  </channel>
</rss>