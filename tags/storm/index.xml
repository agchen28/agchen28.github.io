<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Storm on agchen</title>
    <link>https://agchen28.github.io/tags/storm/</link>
    <description>Recent content in Storm on agchen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 11 Feb 2017 16:11:52 +0800</lastBuildDate>
    
	<atom:link href="https://agchen28.github.io/tags/storm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Storm中Topology的执行过程</title>
      <link>https://agchen28.github.io/blog/storm%E4%B8%ADtopology%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 11 Feb 2017 16:11:52 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/storm%E4%B8%ADtopology%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid>
      <description> Storm粗浅介绍 Apache Storm是一个开源的，分布式的流式计算系统。
每次看到这么官方的句子都觉得不是很好理解。通俗一点讲，Storm运行在一堆机器上，将我们提交的计算任务分配到各个节点上进行运算，流式指的是数据会持续进来，而我们的计算任务会一直进行。
Storm运行在Java虚拟机上，大部分采用Java和Clojure进行开发，使用ZooKeeper来协调集群中的状态信息。
Storm API的基本概念：
 topology ：Storm分布式计算结构。由一些数据源节点和普通计算节点还有一些边组成的有向无环图。ß
 spout：数据源节点
 bolt：普通计算节点。可以进行写数据到外部存储的操作，比如把数据写到数据库里
 stream：数据流，边
 tuple：记录，存在数据流中的记录
  Storm集群中的基本组件：
 Nimbus
一个Storm集群包含一个主节点。主要职责是管理，协调和监控在集群上运行的topology，包括topology的发布，任务的指派。
 Supervisor
一个Storm集群包含一个或者多个工作节点。supervisor等待nimbus分配任务后生成并监控workers（JVM进程）执行任务。
 Storm DRPC
可选功能。提供了可扩展的分布式RPC能力。
 Storm UI
可选功能。一个Web页面，展示Storm的相关信息，提供一些常用操作。
  Storm的并发机制：
 Node
指配置在Storm集群中的一个服务器，会执行topology的一部分运算。
 Worker
指一个节点上相互独立运行的JVM进程。每个节点可以运行一个或多个worker。可以通过supervisor.slots.port参数配置，每个节点默认会有4个进程。每个topology默认使用一个进程来处理，可以通过config.setNumWorkers方法来设置进程数。如果没有可用的worker，提交的topology会处于等待的状态。
 Executor
worker中的Java线程。Storm默认给每个executor分配一个task，每个task可指派给多个executor，多个task可以指派给同一个executor来执行。
 Task
一个task可以简单理解为某个节点上运行的一个spout或者bolt实例。
  Topology运行流程  Topology提交后，代码会被存放到Nimbus节点下。接着会对该topology进行一番检查，比如当前topology名称是否已存在，bolt和spout命名是否规范等。
 Nimbus把任务分成一个个task，并且给每个task一个编号。系统根据worker的数目，尽量平均分配这些task的执行。
 任务分配好之后，Nimbus将任务信息提交到zookeeper上。
 Supervisor节点会不断的轮询zookeeper集群，领取自己的任务，启动worker进程运行。（领取到的task是nimbus对bolt或者spout实例序列化后的字节码文件，需要进行反序列化后得到spout或者bolt实例，并调用相应的方法。）
 至此整个topology运行起来，除非显式地终止, 否则它会一直运行。
  </description>
    </item>
    
    <item>
      <title>Storm集群搭建</title>
      <link>https://agchen28.github.io/blog/storm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 04 Feb 2017 23:30:07 +0800</pubDate>
      
      <guid>https://agchen28.github.io/blog/storm%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid>
      <description>准备  安装java 安装zookeeper  下载  http://storm.apache.org/downloads.html  安装 tar -zxvf apache-storm-1.0.3.tar.gz mkdir data vim conf/storm.yaml #修改配置文件  添加配置项(每行配置前面注意留一个空格)：
storm.zookeeper.servers: - &amp;quot;192.168.142.200&amp;quot; - &amp;quot;192.168.142.201&amp;quot; - &amp;quot;192.168.142.202&amp;quot; nimbus.host: &amp;quot;192.168.142.200&amp;quot; storm.local.dir: &amp;quot;/opt/storm/data&amp;quot;  启动 nohup bin/storm nimbus &amp;amp; #启动nimbus nohup bin/storm supervisor &amp;amp; #启动supervisor nohup bin/storm ui &amp;amp; #启动UI  访问Storm UI http://192.168.142.200:8080/</description>
    </item>
    
  </channel>
</rss>